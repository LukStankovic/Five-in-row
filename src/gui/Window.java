/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import game.exceptions.CheaterException;
import game.exceptions.OutOfBoardException;
import game.exceptions.SymbolAlreadyThereException;
import game.GUIGame;
import game.board.Board;
import game.board.BoardSymbol;
import game.player.InteligentPlayer;
import game.player.Move;
import game.player.Player1;
import game.player.Player3;
import game.player.StupidPlayer;
import game.tournament.Player;
import game.tournament.Tournament;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import java.io.File; 
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;

/**
 *
 * @author lukstankovic
 */
public class Window extends javax.swing.JFrame {

	/**
	 * Creates new form Window
	 */
	public Window() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
	 * content of this method is always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Piškvorky");
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });

        jButton1.setText("Start");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextField1.setText("10");

        jLabel1.setText("Velikost plochy:");

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setSelected(true);
        jRadioButton1.setText("Uživatel první");
        jRadioButton1.setName("humanFirstRadioButton"); // NOI18N

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setText("Počítač první");
        jRadioButton2.setName("PCFirstRadioButton"); // NOI18N

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel2.setToolTipText("");

        jButton2.setText("Uložit");
        jButton2.setEnabled(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Načíst");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Screenshot");
        jButton4.setEnabled(false);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(743, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel2)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jRadioButton2)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jRadioButton1)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addContainerGap(277, Short.MAX_VALUE))
        );

        getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

	GUIGame game;
	
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
		if (game == null || isGameOver) {
			humanFirst = jRadioButton1.isSelected();
			startGame(Integer.parseInt(jTextField1.getText()), jRadioButton1.isSelected());
		} 
		
    }//GEN-LAST:event_jButton1ActionPerformed

	private void startGame(int boardSize, Boolean hFirst) {
		isGameOver = false;
		jLabel2.setText("");
		this.boardSize = boardSize;
		game = new GUIGame(boardSize, new StupidPlayer());
		
		jButton2.setEnabled(true); // save
		jButton3.setEnabled(false); // load
		jButton4.setEnabled(true); // screen
		repaint();
		if (!hFirst) {
			PCMove();
		}

	}
	
    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
		if (game != null && !isGameOver) {
			int positionOnBoardX = (evt.getX() - topXShift) / ((this.getWidth() - topXShift - bottomXShift)/boardSize);
			int positionOnBoardY = (evt.getY() - topYShift) / ((this.getHeight() - topYShift - bottomYShift)/boardSize);
			
			do {
				repaint();
			} while(!isGameOver && humanMove(positionOnBoardX, positionOnBoardY));

			repaint();
			do {
				repaint();
			} while(!isGameOver && PCMove());
			
		}
    }//GEN-LAST:event_formMouseReleased

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
		if (game != null) {
			Board board = game.getBoard();
			JFileChooser fileChooser = new JFileChooser();
			fileChooser.setDialogTitle("Uložit hru");   

			int userSelection = fileChooser.showSaveDialog(this);

			if (userSelection == JFileChooser.APPROVE_OPTION) {
				File fileToSave = fileChooser.getSelectedFile();
				PrintWriter in = null;
				try {
					in = new PrintWriter(new FileWriter(fileToSave.getAbsolutePath()));

					for (int i = 0; i < board.getBoardSize(); i++) {
						for (int j = 0; j < board.getBoardSize(); j++) {
							if (board.getSymbolAtPosition(j, i) == BoardSymbol.CIRCLE) {
								in.write("O");
							} else if (board.getSymbolAtPosition(j, i) == BoardSymbol.CROSS) {
								in.write("X");
							} else {
								in.write(".");
							}
						}
						in.println();
					}

				} catch (IOException ex) {
					Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
				} finally {
					if (in != null) {
						in.close();
					}
				}
			}
		}
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
		if (game == null || isGameOver) {
			JFileChooser fileChooser = new JFileChooser();
			int result = fileChooser.showOpenDialog(this);
			if (result == JFileChooser.APPROVE_OPTION) {
				File selectedFile = fileChooser.getSelectedFile();
				Scanner in = null;
				try {
					in = new Scanner(new BufferedReader(new FileReader(selectedFile.getAbsolutePath())));
					int j = 0;
					startGame(in.nextLine().split("").length, true);
					Board board = game.getBoard();
					while (in.hasNextLine()) {
						String[] oneLine = in.nextLine().split("");
						for(int i =0; i < oneLine.length; i++){
							System.out.println();
							if (oneLine[i].trim().equals("X")) {
								board.setSymbolAccordingToMove(new Move(j, i, BoardSymbol.CROSS), board.getCountSymbols());
							} else if (oneLine[i].trim().equals("O")) {
								board.setSymbolAccordingToMove(new Move(j, i, BoardSymbol.CIRCLE), board.getCountSymbols());
							}
						}
						j++;
					}
					repaint();
				} catch (FileNotFoundException ex) {
					Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
				} finally {
					if (in != null) {
						in.close();
					}
				}
			}
		}
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
/*
		BufferedImage img = new BufferedImage (this.getWidth(), this.getHeight(), BufferedImage.TYPE_INT_RGB);
		Graphics g = img.getGraphics ();
		jFrame1.paint(g);
		g.dispose();
		try{
			ImageIO.write(img, "jpg", new File ("screenshot.jpg"));
		}
		catch (IOException ex){
			ex.printStackTrace ();
		}*/
		BufferedImage img = new BufferedImage(this.getWidth(), this.getHeight(), BufferedImage.TYPE_INT_RGB);
		this.paint(img.getGraphics());
		JFileChooser fileChooser = new JFileChooser();
		fileChooser.setDialogTitle("Uložit screenshot");   
		int userSelection = fileChooser.showSaveDialog(this);
		if (userSelection == JFileChooser.APPROVE_OPTION) {
				File fileToSave = fileChooser.getSelectedFile();
			try {
				ImageIO.write(img, "png", fileToSave);
			} catch (IOException ex) {
				Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
			}
		}
		
    }//GEN-LAST:event_jButton4ActionPerformed
	
	
	private boolean humanMove(int posX, int posY) {
		if (game.makeMove(new Move(posX, posY, BoardSymbol.CIRCLE))) {
			jLabel2.setForeground(Color.black);
			jLabel2.setText("Vyhrál jsi!");
			repaint();
			isGameOver = true;
			jButton1.setText("Nová hra");
			jButton2.setEnabled(false); // save
			jButton3.setEnabled(true); // load
			jButton4.setEnabled(true); // screen
			return true;
		} 
		return false;
	}
	
	private boolean PCMove() {
		if(game.makeMove(BoardSymbol.CROSS)) {
			jLabel2.setForeground(Color.red);
			jLabel2.setText("Vyhrál počítač!");
			repaint();
			isGameOver = true;
			jButton1.setText("Nová hra");
			jButton2.setEnabled(false); // save
			jButton3.setEnabled(true); // load
			jButton4.setEnabled(true); // screen
			return true;
		}
		return false;
	}

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/*ArrayList<Player> players = new ArrayList<>();
		players.add(new Player(new StupidPlayer()));
		players.add(new Player(new Player1()));
		players.add(new Player(new StupidPlayer()));
		
		
		Tournament t = new Tournament(players);
		System.out.println(t);
		t.playTournament();
		System.out.println(t);
		*/
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new Window().setVisible(true);
			}
		});
	}

	private final int topXShift = 20;
	private final int topYShift = 30;
	private final int bottomXShift = 200;
	private final int bottomYShift = 20;
	private int boardSize = 10;
	private boolean isGameOver = false;
	private boolean humanFirst = true;

	@Override
	public void paint(Graphics g) {
		super.paint(g);
		if (game != null) {
			paintBackground(g);
			paintSymbols(g);
		}
	}


	private void paintBackground(Graphics g) {
		int sizeX = this.getWidth() - topXShift - bottomXShift;
		int sizeY = this.getHeight() - topYShift - bottomYShift;
		for (int i = 0; i <= boardSize; i++) {
			int lineXPosition = (int)(((double)sizeX/boardSize) * i) + topXShift;
			g.drawLine(lineXPosition, topYShift, lineXPosition, topYShift + sizeY);
			int lineYPosition = (int)(((double)sizeY/boardSize) * i) + topYShift;
			g.drawLine(topXShift, lineYPosition, topXShift + sizeX, lineYPosition);
		}
	
		
	}
	
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

	private void paintSymbols(Graphics g) {
		Board board = game.getBoard();
		for (int i = 0; i < boardSize; i++) {
			for (int j = 0; j < boardSize; j++) {
				if (board.getSymbolAtPosition(i, j) == BoardSymbol.CIRCLE) {
					int sizeOfCircleX = (int)((double)(this.getWidth() - topXShift - bottomXShift) / boardSize);
					int sizeOfCircleY = (int)((double)(this.getHeight() - topYShift - bottomYShift) / boardSize);
					int positionX = (int)((double)(this.getWidth() - topXShift - bottomXShift) / boardSize * i)  + topXShift;
					int positionY = (int)((double)(this.getHeight() - topYShift - bottomYShift) / boardSize * j)  + topYShift;
					g.setColor(Color.red);
					g.drawOval(positionX, positionY, sizeOfCircleX, sizeOfCircleY);
				} else if (board.getSymbolAtPosition(i, j) == BoardSymbol.CROSS) {
					int positionXFrom = (int)(((double)(this.getWidth() - topXShift - bottomXShift) / boardSize) * i) + topXShift;
					int positionYFrom = (int)(((double)(this.getHeight()- topYShift - bottomYShift) / boardSize) * j) + topYShift;
					int positionXTo = (int)(((double)(this.getWidth() - topXShift - bottomXShift) / boardSize) * (i+1)) + topXShift;
					int positionYTo = (int)(((double)(this.getHeight() - topYShift - bottomYShift) / boardSize) * (j+1)) + topYShift;
					g.setColor(Color.blue);
					g.drawLine(positionXFrom, positionYFrom, positionXTo, positionYTo);
					g.drawLine(positionXTo, positionYFrom, positionXFrom, positionYTo);
				}
			}
		}
	}
}
